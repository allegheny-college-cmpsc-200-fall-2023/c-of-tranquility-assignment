- hello_luna/main.c:
  - description: hello_luna/main.c contains no TODOs
    category: TODOs
    check: MatchFileFragment
    options:
      fragment: 'TODO'
      count: 0
      exact: true
- adder/main.c:
  - description: adder/main.c contains no TODOs
    category: TODOs
    check: MatchFileFragment
    options:
      fragment: 'TODO'
      count: 0
      exact: true
- docs/report.md:
  - description: docs/report.md answers all questions
    category: TODOs
    check: MatchFileFragment
    options:
      fragment: 'TODO'
      count: 0
      exact: true
- hello_luna/main.c:
  - description: hello_luna/main.c contains a printf statement which prints Hello, Luna!
    category: Basic C
    check: MatchFileRegex
    options:
      regex: 'printf\("Hello,(\s)?Luna!"\);'
      count: 1
      exact: true
- hello_luna/main.c:
  - description: hello_luna/main.c contains a return statement of the correct type and value
    category: Basic C
    check: MatchFileRegex
    options:
      regex: 'return 0;'
      count: 1
      exact: true
- hello_luna/main.c:
  - description: hello_luna/main.c main function has correct type
    category: Basic C
    check: MatchFileRegex
    options:
      regex: 'int(\s)+main'
      count: 1
      exact: true
- hello_luna/main.c:
  - description: hello_luna/main.c main parameter is void type
    category: Basic C
    check: MatchFileRegex
    options:
      regex: '\(void\)'
      count: 1
      exact: true
- hello_luna/main.c:
  - description: hello_luna/main.c main function is enclosed in braces
    category: Basic C
    check: MatchFileRegex
    options:
      regex: 'int(\s)+main(\s)?\(void\)(\s)?\{(.*)\}'
      count: 1
      exact: true
- adder/main.c:
  - description: adder/main.c initializes a sum variable as an integer and appropriate starting value
    category: Basic C
    check: MatchFileRegex
    options:
      regex: 'int(\s)+sum(\s)?=(\s)?2;'
      count: 0
      exact: true
- adder/main.c:
  - description: adder/main.c includes a correctly-initialized array called numbers containing 10 values
    category: Basic C
    check: MatchFileRegex
    options:
      regex: 'int\snumbers\[10\](\s)?=(\s)?{[0-9\s,]+};'
      count: 1
      exact: true
- adder/main.c:
  - description: adder/main.c uses sizeof to calculate actual array size
    category: Basic C
    check: MatchFileRegex
    options:
      regex: 'sizeof\([a-z_]+\)'
      count: 2
      exact: true
- adder/main.c:
  - description: adder/main.c uses a for loop to iterate through numbers array
    category: Basic C
    check: MatchFileRegex
    options:
      regex: 'for\(int(\s)+[a-z_]+(\s)+=(\s)+0;(\s)+[a-z_](\s)+<(\s)+[a-z_0-9]+;(\s)+[i+]+\)(\s){0,10}\{(.*)\}'
      count: 1
      exact: true
- adder/main.c:
  - description: adder/main.c accesses the numbers array by index
    category: Basic C
    check: MatchFileRegex
    options:
      regex: 'numbers\[[a-z_]\]'
      count: 1
      exact: false
- adder/main.c:
  - description: adder/main.c uses the add function to add numbers
    category: Basic C
    check: MatchFileRegex
    options:
      regex: 'sum(\s)+=(\s)+add\([a-z_\[\]]+,(\s)+[a-z_\[\]]+\);'
      count: 1
      exact: false
- disassembly/main.c:
  - description: disassembly/main.c has no TODOs
    category: Basic C
    check: MatchFileFragment
    options:
      fragment: 'TODO'
      count: 0
      exact: true
- disassembly/main.c:
  - description: disassembly/main.c initializes an arbitrarily-named variable to 10
    category: Basic C
    check: MatchFileRegex
    options:
      regex: 'int(\s)[a-z_0-9]+(\s)?=(\s)?10;'
      count: 1
      exact: true
- disassembly/main.c:
  - description: disassembly/main.c implements the correct iterative structure
    category: Basic C
    check: MatchFileRegex
    options:
      regex: 'while(\s)?\((.*)\)(\s)?\{(.*)\}'
      count: 1
      exact: true
- disassembly/main.c:
  - description: disassembly/main.c prints the appropriate amount of times
    category: Basic C
    check: MatchFileFragment
    options:
      fragment: 'printf('
      count: 2
      exact: false
- disassembly/main.c:
  - description: disassembly/main.c includes the function identified in the disassembled version
    category: Basic C    
    check: MatchFileRegex
    options:
      regex: 'int(\s)ndown\(int(\s)[a-z_0-9]+,(\s)?int(\s)[a-z_0-9]+\)(\s)?\{'
      count: 1
      exact: true
- disassembly/main.c:
  - description: disassembly/main.c calls the function identified in the disassembled version
    category: Basic C
    check: MatchFileRegex
    options:
      regex: 'ndown\([a-z0-9_]+(\s)?,(\s)?[a-z0-9_]+\);'
      count: 1
      exact: true
- disassembly/main.c:
  - description: disassembly/main.c additional function returns a value
    category: Basic C
    check: MatchFileRegex
    options:
      regex: 'return(\s)[a-z0-9_]+;'
      count: 1
      exact: true
- disassembly/main.c:
  - description: disassembly/main.c main function returns 0
    category: Basic C
    check: MatchFileRegex
    options:
      regex: 'return 0;'
      count: 1
      exact: true